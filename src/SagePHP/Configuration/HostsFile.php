<?php
namespace SagePHP\Configuration;

use SagePHP\Filesystem\File\FileInterface;
use SagePHP\Component\Parser\Ini\Ini;

/**
 * helper class to handle /etc/hosts
 *
 * @author Nuno Costa <nuno@francodacosta.com>
 */
class HostsFile
{
    private $ips = array();
    private $hosts = array();
    private $loaded = false;

    /**
     * path to hosts file
     *
     * @var string
     */
    private $file = '/etc/hosts';

    public function __construct($file = null)
    {
        if (null !== $file) {
            $this->setFile($file);
        }
    }

    private function normalizeLine($line)
    {
         $line = preg_replace('/\t/', ' ', $line);
         $line = preg_replace('/\s+/', ' ', $line);

         return $line;
    }

    private function processLine($line)
    {
        $line = preg_replace('/\#.*/', '', $line);
        if (0 == strlen($line)) {
            return;
        }

        $line = $this->normalizeLine($line);

        $parts = explode(' ', $line);
        if (count($parts) < 2) {
            throw new \OutOfBoundsException('Can not process Line, expection at least one "ip hostname" per line');
        }
        $ip = array_shift($parts);
        $hosts = $parts;

        $this->ips[$ip] = $hosts;
        foreach ($hosts as $host) {
            $this->hosts[$host][] = $ip;
        }
    }

    private function processFile($filePath)
    {

        if ($this->loaded) {
            return;
        }

        $file = fopen($filePath, "r");

        while (!feof($file)) {
            $line = trim(fgets($file));
            $this->processLine($line);
        }

        fclose($file) ;
        $this->loaded = true;
    }

    /**
     * returns True if the $host is defined
     *
     * @param  string  $host
     *
     * @return boolean
     */
    public function hasHost($host)
    {
        $this->processFile($this->getFile());

        return array_key_exists($host, $this->hosts);
    }

    /**
     * returns True if the $ip is defined
     *
     * @param  string  $host
     *
     * @return boolean
     */
    public function hasIp($ip)
    {
        $this->processFile($this->getFile());

        return array_key_exists($ip, $this->ips);
    }

    /**
     * returns True if the $host has $ip
     *
     * @param  string  $ip
     * @param  string  $host
     *
     * @return boolean
     */
    public function has($ip, $host)
    {
        $this->processFile($this->getFile());
        return in_array($ip, $this->hosts[$host]);
    }

    /**
     * returns  hosts defined for $ip
     *
     * @param  string  $ip
     *
     * @return array
     */
    public function getHosts($ip)
    {
        if ($this->hasIp($ip)) {
            return $this->ips[$ip];
        }

        throw new \InvalidArgumentException('IP not found');
    }

    /**
     * returns ip of $host
     *
     * @param  string  $host
     *
     * @return string
     */
    public function getIp($host)
    {
         if ($this->hasHost($host)) {

            return $this->hosts[$host];
        }

        throw new \InvalidArgumentException('host not found');

    }

    /**
     * adds an host and ip to hosts file
     *
     * @param string $ip
     * @param string $host
     */
    public function add($ip, $host)
    {
        $line = "$ip $host";
        $this->processLine($line);
    }

    /**
     * removes an host.
     *
     * @param  string $host
     */
    public function removeHost($host)
    {
        $ips = $this->getIp($host);
        unset($this->hosts[$host]);
        foreach ($ips as $ip) {
            unset($this->ips[$ip][$host]);
        }
    }

    /**
     * removes an ip and all associated hosts
     * @param  [type] $ip [description]
     * @return [type]     [description]
     */
    public function removeIp($ip)
    {
        $hosts = $this->getHosts($ip);
         unset($this->ips[$ip]);

         foreach ($hosts as $host) {
            unset($this->hosts[$host]);
         }
    }

    /**
     * Gets the path to hosts file.
     *
     * @return string
     */
    public function getFile()
    {
        return $this->file;
    }

    /**
     * Sets the path to hosts file.
     *
     * @param string $file the file
     *
     * @return self
     */
    public function setFile($file)
    {
        $this->file = $file;
        $this->loaded = false;

        return $this;
    }

    /**
     * Returns the formatted filr contend
     *
     * @return string
     */
    public function getContent()
    {
        $this->processFile($this->getFile());
        $buffer = array(
            '#',
            '# Generated by SagePHP HostsFile Component',
            '# see https://github.com/SagePHP/',
            '#',
            '',
        );


        foreach ($this->ips as $ip => $hosts) {
            $buffer[] = sprintf("%s\t%s", $ip, implode($hosts, ' '));
        }

        return implode($buffer, "\n");
    }

    public function __toString()
    {
        return $this->testContent();
    }

    public function save()
    {
        file_put_contents($this->getFile(), $this->getContent());
    }
}